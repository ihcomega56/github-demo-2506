name: Generate SBOM and Publish Package

on:
  # リリースタグが作成されたときに実行
  release:
    types: [created]
  
  # Pull Request作成時にも実行
  pull_request:
    branches: [ main ]
  
  # 手動実行も可能に
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g. v1.0.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # SBOM attestation requires this permission
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完全なGit履歴を取得（SBOMの正確性向上）
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
        # GitHub Packagesへの認証設定
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # パッケージのビルド
    - name: Build with Gradle
      run: ./gradlew build
    
    # バージョン情報の設定
    - name: Set Release Version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "VERSION=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi
        echo "VERSION=${{ env.VERSION }}" >> $GITHUB_OUTPUT
    
    # Microsoft SBOM Toolを使用してSBOMを生成（高精度なSBOM生成）
    - name: Generate SBOM with Microsoft SBOM Tool
      run: |
        # Microsoft SBOM Toolのダウンロードと実行権限の付与
        curl -Lo sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
        chmod +x sbom-tool
        
        # SBOMの生成
        ./sbom-tool generate \
          -b . \
          -bc . \
          -pn "${{ github.repository }}" \
          -pv "${{ env.VERSION }}" \
          -ps "${{ github.repository_owner }}" \
          -nsb "https://github.com/${{ github.repository }}"
        
        # SPDXファイルをルートディレクトリにコピー（互換性のため）
        cp _manifest/spdx_2.2/manifest.spdx.json ./sbom.json
    
    # SBOMの検証
    - name: Validate SBOM
      run: |
        if [ ! -f ./sbom.json ]; then
          echo "SBOM file not found"
          exit 1
        fi
        
        if ! grep -q "SPDXID" ./sbom.json; then
          echo "SBOM validation failed: SPDXID not found in file"
          exit 1
        fi
        
        echo "SBOM validated successfully"
    
    # GitHub Packagesへのパッケージのアップロード
    - name: Publish package to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: ./gradlew -Pversion=${{ env.VERSION }} publish
    
    # リリース時の処理
    - name: Process Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./sbom.json
          ./_manifest/spdx_2.2/manifest.spdx.json
        name: Release ${{ env.VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # リリースでない場合はアーティファクトとして保存
    - name: Upload SBOM as Artifact
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ env.VERSION }}
        path: |
          ./sbom.json
          ./_manifest/spdx_2.2/manifest.spdx.json
        retention-days: 30
